#1	https://py2.codeskulptor.org/#user49_19KPAbs0svzzKVo_0.py

# Rock-paper-scissors-lizard-Spock template
import random

# The key idea of this program is to equate the strings
# "rock", "paper", "scissors", "lizard", "Spock" to numbers
# as follows:
#
# 0 - rock
# 1 - Spock
# 2 - paper
# 3 - lizard
# 4 - scissors

# helper functions

def name_to_number(name):
    
    if name == "rock": n = 0
    elif name == "Spock": n = 1
    elif name == "paper": n = 2
    elif name == "lizard": n = 3
    elif name == "scissors": n = 4
    else: print 'name_to_number: Error: variable "name" does not match any available options!'
    return n


def number_to_name(number):
    
    if number == 0: name = "rock"
    elif number == 1: name = "Spock"
    elif number == 2: name = "paper"
    elif number == 3: name = "lizard"
    elif number == 4: name = "scissors"
    else: print 'number_to_name: Error: variable "number" is not in the correct range!'
    return name
    
    
def rpsls(player_choice):
    
    print "\n"
    print 'Player chooses ', player_choice
    
    player_number = name_to_number(player_choice)
    computer_number = random.randrange(5)
    computer_choise = number_to_name(computer_number)
    print 'Computer chooses: ', computer_choise

    dif = (computer_number - player_number) % 5
    if dif == 0: print "Player and computer tie!"
    elif dif == 1 or dif == 2: print 'Computer wins!'
    elif dif == 3 or dif == 4: print 'Player wins!'
    
    
# test your code - THESE CALLS MUST BE PRESENT IN YOUR SUBMITTED CODE
rpsls("rock")
rpsls("Spock")
rpsls("paper")
rpsls("lizard")
rpsls("scissors")

# always remember to check your completed program against the grading rubric



#2	https://py2.codeskulptor.org/#user49_nYSu02kmn3pvm7L.py

# template for "Guess the number" mini-project
# input will come from buttons and an input field
# all output for the game will be printed in the console
import simplegui
import random
import math


# helper function to start and restart the game
def new_game(flag_in=0):
    global secret_number
    global left
    global flag
    flag = flag_in
    
    if flag == 0:
        secret_number = random.randrange(0, 100)
        print "range[0,100)"
        tries = math.ceil(math.log(101, 2))
    else:
        secret_number = random.randrange(0, 1000)
        print "range[0,1000)"
        tries = math.ceil(math.log(1001, 2))
    
    left = tries
    print "remain:", tries, "\n"

# define event handlers for control panel
def range100():
    # button that changes the range to [0,100) and starts a new game 
    print '\n'
    new_game()
    

def range1000():
    # button that changes the range to [0,1000) and starts a new game     
    print '\n'
    new_game(1)
    
    
def input_guess(guess):
    # main game logic goes here	
    global left
    global secret_number
    
    if left > 0:
        left -= 1
        new_guess = int(guess)
        print "Guess was: ", new_guess
        
        if secret_number < new_guess:
            print "Lower!"
            print "remain:", left, "\n"
        elif secret_number > new_guess:
            print "Higher!"
            print "remain:", left, "\n"
        else:
            print "Correct!"
            print "remain:", left, "\n"
            print "You win! start new game!\n"
            new_game(flag)
        
    if left == 0:
        print "You run out of tries! Start new game! Correct is ", secret_number, "\n"
        new_game(f)

    
# create frame
frame = simplegui.create_frame('Guess the number!', 300, 200)

# register event handlers for control elements and start frame
input_field1 = frame.add_input('Guess', input_guess, 40)
range100 = frame.add_button('Range = 100', range100, 120)
range1000 = frame.add_button('Range = 1000', range1000, 120)

# call new_game 
new_game()



#3	https://py2.codeskulptor.org/#user49_u864HkP2EBoK45h_0.py

# template for "Stopwatch: The Game"

import simplegui

# define global variables
mesg = "0:00.0"
x = 0
y = 0
time = 0

# define helper function format that converts time
# in tenths of seconds into formatted string A:BC.D
def format(t):
    s = "0:00.0"
    t_str = str(t)
    if len(t_str) == 1:
        return s[0:5] + t_str
    elif len(t_str) == 2:
        return s[0:3] + t_str[0] + "." + t_str[1]
    elif len(t_str) == 3 and int(t_str[0]) <= 5:
        return s[0:2] + t_str[0] + t_str[1] + "." + t_str[2]
    elif len(t_str) == 3 and int(t_str[0]) > 5:
        return "1:" + str(int(t_str[0])-6) + t_str[1] + "." + t_str[2]
    else:
        return str(int(t_str[0:2]) // 6) + ":" + str(int(t_str[0:2]) - 6 * (int(t_str[0:2]) // 6)) + t_str[2] + "." + t_str[3]
    
# define event handlers for buttons; "Start", "Stop", "Reset"
def start_button():
    timer.start()
    
    
def stop_button():
    timer.stop()
    
    global x, y
    y = y + 1
    if time % 10 == 0:
        x = x + 1
        

def reset_button():
    if timer.is_running():
        timer.stop()
        
        global time, mesg, x, y
        mesg = "0:00.0"
        time = 0
        x = 0
        y = 0
        

# define event handler for timer with 0.1 sec interval
def tick():
    global time, mesg
    time += 1
    mesg = format(time)

# define draw handler
def draw(canv):
    canv.draw_text(mesg, [150, 190], 45, "red")
    canv.draw_text(str(x) + "/" + str(y), [350, 30], 30, "white")
    
# create frame
frame = simplegui.create_frame("Stopwatch game", 400, 350)

# register event handlers
timer = simplegui.create_timer(100, tick)
frame.set_draw_handler(draw)
frame.add_button("Start", start_button, 100)
frame.add_button("Stop", stop_button, 100)
frame.add_button("Reset", reset_button, 100)

# start frame
frame.start()

# Please remember to review the grading rubric



#4	https://py2.codeskulptor.org/#user49_n4J59NWk15Vw50o.py

# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True

ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0, 0]
paddle1_pos, paddle2_pos = HEIGHT / 2, HEIGHT / 2
paddle1_vel, paddle2_vel = 0, 0

score1, score2 = 0, 0
time = 0
# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    
    if direction == RIGHT:
        ball_vel[0], ball_vel[1] = random.randrange(2, 5), -random.randrange(1, 4)
    else:
        ball_vel[0], ball_vel[1] = -random.randrange(2, 5), -random.randrange(1, 4)


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    
    spawn_ball(RIGHT)
    score1, score2 = 0, 0
    paddle1_pos, paddle2_pos = HEIGHT / 2, HEIGHT / 2
    

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] +=  ball_vel[0]
    ball_pos[1] +=  ball_vel[1]
    if ball_pos[1] - BALL_RADIUS <= 0 or ball_pos[1] + BALL_RADIUS >= HEIGHT:
        ball_vel[1] = - ball_vel[1]
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, 'Yellow', 'White')
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos + paddle1_vel >= HALF_PAD_HEIGHT and \
    paddle1_pos + paddle1_vel <= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos += paddle1_vel
    
    if paddle2_pos + paddle2_vel >= HALF_PAD_HEIGHT and \
    paddle2_pos + paddle2_vel <= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos += paddle2_vel
        
    # draw paddles
    canvas.draw_polygon([[0, paddle1_pos - HALF_PAD_HEIGHT], \
                         [PAD_WIDTH, paddle1_pos - HALF_PAD_HEIGHT], \
                         [PAD_WIDTH, paddle1_pos + HALF_PAD_HEIGHT], \
                         [0, paddle1_pos + HALF_PAD_HEIGHT]], 1, 'Blue', 'White')
    
    canvas.draw_polygon([[WIDTH - PAD_WIDTH, paddle2_pos - HALF_PAD_HEIGHT], \
                         [WIDTH, paddle2_pos - HALF_PAD_HEIGHT], \
                         [WIDTH, paddle2_pos + HALF_PAD_HEIGHT], \
                         [WIDTH - PAD_WIDTH, paddle2_pos + HALF_PAD_HEIGHT]], 1, 'Red', 'White')
    
    # determine whether paddle and ball collide
    if ball_pos[0] - BALL_RADIUS <= PAD_WIDTH:
        if ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT and ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT:
            ball_vel[0] = - 1.1 * ball_vel[0]
            ball_vel[1] = 1.1 * ball_vel[1]
        else:
            score2 += 1
            spawn_ball(RIGHT)
    
    if ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH:
        if ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT and ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT:
            ball_vel[0] = - 1.1 * ball_vel[0]
            ball_vel[1] = 1.1 * ball_vel[1]
        else:
            score1 += 1
            spawn_ball(LEFT)
            
    # draw scores
    canvas.draw_text(str(score1), (WIDTH/3, HEIGHT/4), 45, 'Blue')
    canvas.draw_text(str(score2), (WIDTH - WIDTH/3 - 20, HEIGHT/4), 45, 'Red')
    
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= 5
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel += 5
    if key == simplegui.KEY_MAP["w"] and key == simplegui.KEY_MAP["s"]:
        pass
    
    if key == simplegui.KEY_MAP["up"]:            
        paddle2_vel -= 5
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel += 5
    if key == simplegui.KEY_MAP["up"] and key == simplegui.KEY_MAP["down"]:
        pass
    

def keyup(key):
    global paddle1_vel, paddle2_vel
    
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["w"] and key == simplegui.KEY_MAP["s"]:
        pass
    
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP["down"] and key == simplegui.KEY_MAP["up"]:
        pass
    


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game = frame.add_button('Restart', new_game, 100)
frame.start()
