# Вирішення задач з допомогою модуля M_set

from M_set import *

print("\n ЗАДАЧА a)")

S = input("Треба рядок: ")
s_set = M_set()
for i in S: s_set.add(i)            # Створюємо мультимножину на основі рядка
print("\nМультимножина S\n", s_set)
max_s_value = 0; max_s = ""
for k, n in s_set.d.items():
    if n > max_s_value: max_s_value = n; max_s = k
print("Символ, який входить у рядок максимальну кількість разів ({}): ".format(max_s_value), max_s)


S1 = input("Треба 1-ий рядок: ")
S2 = input("Треба 2-ий рядок: ")
s_set1 = M_set()
s_set2 = M_set()
for i in S1: s_set1.add(i)
for i in S2: s_set2.add(i)
s_in = s_set1.ms_intersect(s_set2)
s_un = s_set1.ms_union(s_set2)
print("\nМультимножина S1\n", s_set1)
print("\nМультимножина S2\n", s_set2)
print("\nПеретин мультимножин S1 та S2\n", s_in)
print("\nОб'єднання мультимножин S1 та S2\n", s_un)

print("\n ЗАДАЧА b)")
# Якщо мультимножини рівні, то їхній перетин теж повинен бути рівним кожній із них.

# Наші мультимножини не мають впорядкованості та методів, що дозволили б порівнювати їх на пряму. Тому порівнюємо їх
# поля-словники, які мають потрібні методи.
print(["Так, дані рядки складаються з одних і тих же символів, які входять до них однакову кількість разів.",
       "Не складаються з однакових символів або однакової кількості символів!"]
      [not(s_in.d == s_set1.d and s_in.d == s_set2.d)])

print("\n ЗАДАЧА c)")
# За умовою в другій множині не може бути менше входжень елементів, що є у першій, ніж у першій.
# Тому друга множина є більшою-рівною у входженнях елементів, а тоді вона повинна бути рівною їхньому об'єднанню.

# Наші мультимножини не мають впорядкованості та методів, що дозволили б порівнювати їх на пряму. Тому порівнюємо їх
# поля-словники, які мають потрібні методи.
print(["Так, всі однакові символи 2-го рядка входять до 1-го, причому в 2-му рядку ці символи входять не меншу\n"
       "кількість разів, ніж у 1-му.", "В 2-му рядку не всі однакові символи входять до першого або недостатню"
                                       " кількість разів!"][not s_un.d == s_set2.d])
